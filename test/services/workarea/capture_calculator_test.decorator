module Workarea
  decorate CaptureCalculatorTest, with: :sleep_number do
    def test_shipping_total
      service = create_shipping_service(tax_code: '001', rates: [{ price: 9.95.to_m }])

      order = Workarea::Order.new(email: 'bcrouse@weblinc.com')
      order.add_item(product_id: 'PRODUCT', sku: 'SKU', quantity: 1)
      complete_checkout(order, shipping_service: service)

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(9.95.to_m, calculator.shipping_total)
    end

    def test_shipping_total_with_multiple_shippings
      build_split_shipping_order

      calculator = CaptureCalculator.new(
        @order,
        quantities: { @order.items.first.id => 1 }
      )

      assert_equal(15.to_m, calculator.shipping_total)

      calculator = CaptureCalculator.new(
        @order,
        quantities: { @order.items.first.id => 1 },
        shipping_ids: [@shippings.first.id.to_s]
      )

      assert_equal(5.to_m, calculator.shipping_total)

      @fulfillment.ship_items(
        '1z',
        [{
          id: @order.items.first.id.to_s,
          quantity: 1,
          shipping_id: @shippings.first.id.to_s
        }]
      )

      calculator = CaptureCalculator.new(
        @order,
        quantities: { @order.items.first.id => 1 }
      )

      assert_equal(10.to_m, calculator.shipping_total)
    end

    def test_tax_total_with_multiple_shippings
      build_split_shipping_order

      calculator = CaptureCalculator.new(
        @order,
        quantities: { @order.items.first.id => 1 }
      )

      assert_equal(0.8.to_m, calculator.tax_total)

      calculator = CaptureCalculator.new(
        @order,
        quantities: { @order.items.first.id => 1 },
        shipping_ids: [@shippings.first.id.to_s]
      )

      assert_equal(0.5.to_m, calculator.tax_total)

      @fulfillment.ship_items(
        '1z',
        [{
          id: @order.items.first.id.to_s,
          quantity: 1,
          shipping_id: @shippings.first.id.to_s
        }]
      )

      calculator = CaptureCalculator.new(
        @order,
        quantities: { @order.items.first.id => 1 }
      )

      assert_equal(0.50.to_m, calculator.tax_total)
    end

    def test_first_capture
      order = Workarea::Order.new(email: 'bcrouse@weblinc.com')
      order.add_item(product_id: 'PRODUCT', sku: 'SKU', quantity: 1)
      complete_checkout(order)

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 },
      )

      assert_equal(10.to_m, calculator.item_total)
      assert_equal(1.to_m, calculator.shipping_total)
      assert_equal(0.22.to_m, calculator.tax_total)
      assert_equal(0.to_m, calculator.captured_total)
      assert_equal(11.22.to_m, calculator.total)
    end

    def test_partial_capture
      order = Order.new(email: 'bcrouse@weblinc.com')
      order.add_item(product_id: 'PRODUCT', sku: 'SKU', quantity: 3)
      complete_checkout(order)

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(10.to_m, calculator.item_total)
      assert_equal(1.to_m, calculator.shipping_total)
      assert_equal(0.22.to_m, calculator.tax_total)
      assert_equal(11.22.to_m, calculator.total)

      shipping_id = Shipping.by_order(order.id).pluck(:id).first.to_s
      fulfillment = Fulfillment.find(order.id)
      fulfillment.ship_items(
        '1z',
        [{ id: order.items.first.id, quantity: 1, shipping_id: shipping_id }]
      )

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(10.to_m, calculator.item_total)
      assert_equal(0.to_m, calculator.shipping_total)
      assert_equal(0.2.to_m, calculator.tax_total)
      assert_equal(10.2.to_m, calculator.total)

      fulfillment = Fulfillment.find(order.id)
      fulfillment.ship_items(
        '1z',
        [{ id: order.items.first.id, quantity: 1, shipping_id: shipping_id }]
      )

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(10.to_m, calculator.item_total)
      assert_equal(0.to_m, calculator.shipping_total)
      assert_equal(0.2.to_m, calculator.tax_total)
      assert_equal(10.2.to_m, calculator.total)

      fulfillment = Fulfillment.find(order.id)
      fulfillment.ship_items(
        '1z',
        [{ id: order.items.first.id, quantity: 1, shipping_id: shipping_id }]
      )

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(0.to_m, calculator.item_total)
      assert_equal(0.to_m, calculator.shipping_total)
      assert_equal(0.to_m, calculator.tax_total)
      assert_equal(0.to_m, calculator.total)
    end

    def test_capture_with_previously_captured_funds
      order = Workarea::Order.new(email: 'bcrouse@weblinc.com')
      order.add_item(product_id: 'PRODUCT', sku: 'SKU', quantity: 1)
      complete_checkout(order)

      payment = Payment.find(order.id)
      Payment::Capture.new(
        payment: payment,
        amounts: { payment.credit_card.id.to_s => '5.00' }
      ).complete!

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(10.to_m, calculator.item_total)
      assert_equal(1.to_m, calculator.shipping_total)
      assert_equal(0.22.to_m, calculator.tax_total)
      assert_equal(5.to_m, calculator.captured_total)
      assert_equal(6.22.to_m, calculator.total)
    end

    def test_rounding_errors
      create_product_discount(
        product_ids: %w(PRODUCT),
        amount_type: 'percent',
        amount: 0.33,
        promo_codes: %w(foo)
      )

      order = Workarea::Order.new(email: 'bcrouse@weblinc.com', promo_codes: %w(foo))
      order.add_item(product_id: 'PRODUCT', sku: 'SKU', quantity: 2)
      complete_checkout(order)

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(9.96.to_m, calculator.item_total)
      assert_equal(1.to_m, calculator.shipping_total)
      assert_equal(0.22.to_m, calculator.tax_total)
      assert_equal(11.18.to_m, calculator.total)

      shipping_id = Shipping.by_order(order.id).pluck(:id).first.to_s
      fulfillment = Fulfillment.find(order.id)
      fulfillment.ship_items(
        '1z',
        [{ id: order.items.first.id, quantity: 1, shipping_id: shipping_id }]
      )

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(9.97.to_m, calculator.item_total)
      assert_equal(0.to_m, calculator.shipping_total)
      assert_equal(0.2.to_m, calculator.tax_total)
      assert_equal(10.17.to_m, calculator.total)
    end

    def test_rounding_with_canceled_items
      create_product_discount(
        product_ids: %w(PRODUCT),
        amount_type: 'percent',
        amount: 0.33,
        promo_codes: %w(foo)
      )

      order = Workarea::Order.new(email: 'bcrouse@weblinc.com', promo_codes: %w(foo))
      order.add_item(product_id: 'PRODUCT', sku: 'SKU', quantity: 2)
      complete_checkout(order)

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(9.96.to_m, calculator.item_total)
      assert_equal(1.to_m, calculator.shipping_total)
      assert_equal(0.22.to_m, calculator.tax_total)
      assert_equal(11.18.to_m, calculator.total)

      fulfillment = Fulfillment.find(order.id)
      fulfillment.cancel_items([{ id: order.items.first.id, quantity: 1 }])

      calculator = CaptureCalculator.new(
        order,
        quantities: { order.items.first.id => 1 }
      )

      assert_equal(9.97.to_m, calculator.item_total)
      assert_equal(1.to_m, calculator.shipping_total)
      assert_equal(0.22.to_m, calculator.tax_total)
      assert_equal(11.19.to_m, calculator.total)
    end
  end
end
