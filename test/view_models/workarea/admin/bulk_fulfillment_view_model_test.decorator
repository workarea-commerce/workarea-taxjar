# require 'test_helper'

module Workarea
  module Admin
    decorate BulkFulfillmentViewModelTest, with: :sleep_number do
      # setup :set_product

      # def set_product
      #   @product = create_product(
      #     id: 'PRODUCT',
      #     variants: [
      #       { sku: 'SKU1', regular: 10.to_m },
      #       { sku: 'SKU2', regular: 10.to_m }
      #     ]
      #   )
      # end

      def test_quantities_by_catalog_group_by_product
        order_one = Workarea::Order.new(email: 'one@weblinc.com')
        order_one.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_one)

        order_two = Workarea::Order.new(email: 'two@weblinc.com')
        order_two.add_item(product_id: 'PRODUCT', sku: 'SKU2', quantity: 1)
        complete_checkout(order_two)

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(2, view_model.quantities_by_catalog.size)
        assert_equal(1, view_model.quantities_by_catalog[['PRODUCT', 'SKU1', {}]])
        assert_equal(1, view_model.quantities_by_catalog[['PRODUCT', 'SKU2', {}]])
      end

      def test_quantities_by_catalog_group_by_sku
        order_one = Workarea::Order.new(email: 'one@weblinc.com')
        order_one.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_one)

        order_two = Workarea::Order.new(email: 'two@weblinc.com')
        order_two.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_two)

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(1, view_model.quantities_by_catalog.size)
        assert_equal(2, view_model.quantities_by_catalog[['PRODUCT', 'SKU1', {}]])
      end

      def test_quantities_by_catalog_group_by_customizations
        order_one = Workarea::Order.new(email: 'one@weblinc.com')
        order_one.add_item(
          product_id: 'PRODUCT',
          sku: 'SKU1',
          quantity: 1,
          customizations: { 'foo' => 'bar' }
        )
        complete_checkout(order_one)

        order_two = Workarea::Order.new(email: 'two@weblinc.com')
        order_two.add_item(
          product_id: 'PRODUCT',
          sku: 'SKU1',
          quantity: 1,
          customizations: { 'foo' => 'bar' }
        )
        complete_checkout(order_two)

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(1, view_model.quantities_by_catalog.size)
        assert_equal(
          2,
          view_model.quantities_by_catalog[['PRODUCT', 'SKU1', { 'foo' => 'bar' }]]
        )
      end

      def test_quantities_by_catalog_exclude_shipped_items
        order_one = Workarea::Order.new(email: 'one@weblinc.com')
        order_one.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_one)
        fulfill_order(order_one)

        order_two = Workarea::Order.new(email: 'two@weblinc.com')
        order_two.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_two)

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(1, view_model.quantities_by_catalog.size)
        assert_equal(1, view_model.quantities_by_catalog[['PRODUCT', 'SKU1', {}]])
      end

      def test_totals
        order_one = Workarea::Order.new(email: 'one@weblinc.com')
        order_one.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_one)
        fulfill_order(order_one)

        order_two = Workarea::Order.new(email: 'two@weblinc.com')
        order_two.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 2)
        complete_checkout(order_two)

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(0, view_model.calculators.size)
        assert_equal(0, view_model.item_total)
        assert_equal(0, view_model.shipping_total)
        assert_equal(0, view_model.tax_total)
        assert_equal(0, view_model.total)

        fulfillment_two = Fulfillment.find(order_two.id)
        shipment = fulfillment_two.shipments.create!(
          tracking_number: '1z',
          quantities: { order_two.items.first.id => 1 }
        )

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(1, view_model.calculators.size)
        assert_equal(10.to_m, view_model.item_total)
        assert_equal(1.to_m, view_model.shipping_total)
        assert_equal(0.02, view_model.tax_total)
        assert_equal(11.02.to_m, view_model.total)
      end

      def test_pending_orders
        order_one = Workarea::Order.new(email: 'one@weblinc.com')
        order_one.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 1)
        complete_checkout(order_one)

        order_two = Workarea::Order.new(email: 'two@weblinc.com')
        order_two.add_item(product_id: 'PRODUCT', sku: 'SKU1', quantity: 2)
        complete_checkout(order_two)

        bulk = BulkAction::Fulfillment.new(
          ids: [order_one.to_global_id, order_two.to_global_id]
        )

        view_model = BulkFulfillmentViewModel.wrap(bulk)
        assert_equal(2, view_model.pending_orders.size)
        assert_equal(1, view_model.pending_orders[order_one])
        assert_equal(2, view_model.pending_orders[order_two])

        fulfillment_two = Fulfillment.find(order_two.id)
        shipment = fulfillment_two.shipments.create!(
          tracking_number: '1z1',
          quantities: { order_two.items.first.id => 1 }
        )

        view_model = BulkFulfillmentViewModel.wrap(
          BulkAction::Fulfillment.new(
            ids: [order_one.to_global_id, order_two.to_global_id]
          )
        )
        assert_equal(2, view_model.pending_orders.size)
        assert_equal(1, view_model.pending_orders[order_one])
        assert_equal(1, view_model.pending_orders[order_two])

        fulfillment_one = Fulfillment.find(order_one.id)
        shipment = fulfillment_one.shipments.create!(
          tracking_number: '1z1',
          quantities: { order_one.items.first.id => 1 }
        )

        view_model = BulkFulfillmentViewModel.wrap(
          BulkAction::Fulfillment.new(
            ids: [order_one.to_global_id, order_two.to_global_id]
          )
        )
        assert_equal(1, view_model.pending_orders.size)
        assert_equal(1, view_model.pending_orders[order_two])

        shipment = fulfillment_two.shipments.create!(
          tracking_number: '1z2',
          quantities: { order_two.items.first.id => 1 }
        )
        view_model = BulkFulfillmentViewModel.wrap(
          BulkAction::Fulfillment.new(
            ids: [order_one.to_global_id, order_two.to_global_id]
          )
        )
        assert(view_model.pending_orders.empty?)
      end
    end
  end
end
