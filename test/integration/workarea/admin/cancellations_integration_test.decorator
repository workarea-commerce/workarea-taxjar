module Workarea
  module Admin
    decorate CancellationsIntegrationTest, with: :taxjar do
      def test_saving_a_complete_cancellation
        set_order
        create_and_commit_shipments(@order)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            refund_items: true,
            refund_shipping: true,
            restock: true,
            comment: "here's a fantastic reason to cancel this order"
          }

        assert(@order.reload.canceled?)
        assert_equal(1, @order.comments.size)
        assert_equal(
          "here's a fantastic reason to cancel this order",
          @order.comments.first.body
        )

        fulfillment = Fulfillment.find(@order.id)
        assert_equal(:canceled, fulfillment.status)
        assert_equal(1, fulfillment.items.first.quantity_canceled)
        assert_equal(2, fulfillment.items.second.quantity_canceled)

        payment = Payment.find(@order.id)
        assert_equal(:refunded, payment.status)
        assert_equal(@order.total_price, payment.credit_card.refunded_amount)
        assert_equal('refund', payment.credit_card.transactions.first.action)
        assert_equal(@order.total_price, payment.credit_card.transactions.first.amount)
        assert_equal(1, Payment::Refund.count)
        assert(Payment::Refund.first.includes_shipping?)

        assert_equal(5, @inventory_one.reload.available)
        assert_equal(3, @inventory_two.reload.available)

        metrics = Metrics::SalesByDay.first
        assert_equal(1, metrics.cancellations)
        assert_equal(-52.02, metrics.refund)
      end

      def test_cancelling_without_refunding
        set_order
        create_and_commit_shipments(@order)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            refund_items: false,
            refund_shipping: false,
            restock: true
          }

        payment = Payment.find(@order.id)
        assert_equal(:captured, payment.status)
        assert_equal(0, Payment::Refund.count)

        metrics = Metrics::SalesByDay.first
        assert_equal(1, metrics.cancellations)
        assert_equal(0, metrics.refund)
      end

      def test_saving_single_item_cancellation
        set_order
        create_and_commit_shipments(@order)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: {
              shipping.id.to_s => {
                @order.items.first.id => @order.items.first.quantity
              }
            },
            refund_items: true,
            refund_shipping: false,
            restock: true
          }

        refute(@order.reload.canceled?)

        fulfillment = Fulfillment.find(@order.id)
        assert_equal(1, fulfillment.items.first.quantity_canceled)
        assert_equal(0, fulfillment.items.second.quantity_canceled)

        payment = Payment.find(@order.id)
        assert_equal(:partially_refunded, payment.status)
        assert_equal(10.2.to_m, payment.credit_card.refunded_amount)
        assert_equal('refund', payment.credit_card.transactions.first.action)
        assert_equal(10.2.to_m, payment.credit_card.transactions.first.amount)
        assert_equal(1, Payment::Refund.count)
        refute(Payment::Refund.first.includes_shipping?)

        assert_equal(5, @inventory_one.reload.available)
        assert_equal(1, @inventory_two.reload.available)

        metrics = Metrics::SalesByDay.first
        assert_equal(1, metrics.cancellations)
        assert_equal(-10.2, metrics.refund)
      end

      def test_partial_item_cancellation
        set_order
        create_and_commit_shipments(@order)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: {
              shipping.id.to_s => { @order.items.second.id => 1 }
            },
            refund_items: true,
            refund_shipping: false,
            restock: true
          }

        refute(@order.reload.canceled?)

        fulfillment = Fulfillment.find(@order.id)
        assert_equal(0, fulfillment.items.first.quantity_canceled)
        assert_equal(1, fulfillment.items.second.quantity_canceled)

        payment = Payment.find(@order.id)
        assert_equal(:partially_refunded, payment.status)
        assert_equal(20.4.to_m, payment.credit_card.refunded_amount)
        assert_equal('refund', payment.credit_card.transactions.first.action)
        assert_equal(20.4.to_m, payment.credit_card.transactions.first.amount)

        assert_equal(4, @inventory_one.reload.available)
        assert_equal(2, @inventory_two.reload.available)

        metrics = Metrics::SalesByDay.first
        assert_equal(1, metrics.cancellations)
        assert_equal(-20.4, metrics.refund)
      end

      def test_cancelling_non_captured_order
        set_order

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            refund_items: true,
            refund_shipping: true,
            restock: true
          }

        assert(@order.reload.canceled?)

        fulfillment = Fulfillment.find(@order.id)
        assert_equal(:canceled, fulfillment.status)
        assert_equal(1, fulfillment.items.first.quantity_canceled)
        assert_equal(2, fulfillment.items.second.quantity_canceled)

        payment = Payment.find(@order.id)
        assert_equal(:authorized, payment.status)
        assert_equal(1, payment.credit_card.transactions.size)
        assert_equal('authorize', payment.credit_card.transactions.first.action)

        assert_equal(5, @inventory_one.reload.available)
        assert_equal(3, @inventory_two.reload.available)
      end

      def test_cancelling_already_canceled_order
        set_order
        create_and_commit_shipments(@order)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            refund_items: true,
            refund_shipping: true,
            restock: true
          }

        assert(@order.reload.canceled?)

        get admin.new_cancellations_path(@order)
        assert_redirected_to(admin.order_path(@order))

        post admin.save_cancellations_path(@order)
        assert_redirected_to(admin.order_path(@order))
      end

      def test_cancelling_a_backorder
        @inventory_two.update_attributes!(
          policy: 'allow_backorder',
          available: 1,
          backordered: 2,
          backordered_until: 1.week.from_now
        )

        set_order

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            restock: true
          }

        assert_equal(5, @inventory_one.reload.available)
        assert_equal(1, @inventory_two.reload.available)
        assert_equal(2, @inventory_two.reload.backordered)
      end

      def test_cancelling_a_backorder_no_longer_backordered
        @inventory_two.update_attributes!(
          policy: 'allow_backorder',
          available: 1,
          backordered: 2,
          backordered_until: 1.week.from_now
        )

        travel_to 2.weeks.from_now
        set_order

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            restock: true
          }

        assert_equal(5, @inventory_one.reload.available)
        assert_equal(2, @inventory_two.reload.available)
      end

      def test_item_display
        set_order
        create_and_commit_shipments(@order)

        get admin.options_cancellations_path(@order),
          params: {
            quantities: { shipping.id.to_s => { @order.items.second.id => 1 } }
          }

        refute(response.body.include?('SKU1'))
        assert(response.body.include?('SKU2'))
      end

      def test_not_selecting
        set_order
        create_and_commit_shipments(@order)

        get admin.options_cancellations_path(@order)
        assert_redirected_to(admin.new_cancellations_path(@order))
        assert(flash[:error].present?)

        get admin.options_cancellations_path(@order),
          params: {
            quantities: { shipping.id.to_s => { @order.items.second.id => 0 } }
          }
        assert_redirected_to(admin.new_cancellations_path(@order))
        assert(flash[:error].present?)

        post admin.save_cancellations_path(@order)
        assert_redirected_to(admin.new_cancellations_path(@order))
        assert(flash[:error].present?)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: { shipping.id.to_s => { @order.items.second.id => 0 } }
          }
        assert_redirected_to(admin.new_cancellations_path(@order))
        assert(flash[:error].present?)
      end

      def test_with_existing_refund
        set_order
        create_and_commit_shipments(@order)
        payment = Payment.find(@order.id)

        post admin.order_refund_path(@order),
          params: {
            refund: {
              amounts: {
                payment.credit_card.id => payment.credit_card.amount - 10.to_m
              }
            }
          }

        get admin.options_cancellations_path(@order),
          params: {
            quantities: { shipping.id.to_s => { @order.items.second.id => 1 } }
          }

        assert(response.ok?)

        post admin.save_cancellations_path(@order),
          params: {
            quantities: full_cancellation_quantities,
            refund_items: true,
            refund_shipping: true
          }

        payment = Payment.find(@order.id)
        assert_equal(:refunded, payment.status)
        assert_equal(52.02.to_m, payment.credit_card.refunded_amount)
        assert_equal('refund', payment.credit_card.transactions.first.action)
        assert_equal(10.to_m, payment.credit_card.transactions.first.amount)
      end
    end
  end
end
